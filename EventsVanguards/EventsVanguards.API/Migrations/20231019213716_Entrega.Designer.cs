// <auto-generated />
using System;
using EventsVanguards.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventsVanguards.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231019213716_Entrega")]
    partial class Entrega
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventsVanguards.Shared.Entities.EventStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventRole")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("EventStaffs");
                });

            modelBuilder.Entity("EventsVanguards.Shared.Entities.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateEvent")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EventType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("Hour")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("EventsVanguards.Shared.Entities.MeetingSponsor", b =>
                {
                    b.Property<int>("IdMeeting")
                        .HasColumnType("int");

                    b.Property<string>("IdSponsor")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("MeetingId")
                        .HasColumnType("int");

                    b.Property<int?>("SponsorId")
                        .HasColumnType("int");

                    b.HasKey("IdMeeting", "IdSponsor");

                    b.HasIndex("MeetingId");

                    b.HasIndex("SponsorId");

                    b.ToTable("MeetingSponsors");
                });

            modelBuilder.Entity("EventsVanguards.Shared.Entities.MeetingStaff", b =>
                {
                    b.Property<int>("IdMeeting")
                        .HasColumnType("int");

                    b.Property<string>("IdEventStaff")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("EventStaffId")
                        .HasColumnType("int");

                    b.Property<int?>("MeetingId")
                        .HasColumnType("int");

                    b.HasKey("IdMeeting", "IdEventStaff");

                    b.HasIndex("EventStaffId");

                    b.HasIndex("MeetingId");

                    b.ToTable("MeetingStaffs");
                });

            modelBuilder.Entity("EventsVanguards.Shared.Entities.Organizer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact_Info")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Organizers");
                });

            modelBuilder.Entity("EventsVanguards.Shared.Entities.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("EventsVanguards.Shared.Entities.Register", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CredentialingInf")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("IdMeeting")
                        .HasColumnType("int");

                    b.Property<int>("IdParticipant")
                        .HasColumnType("int");

                    b.Property<int?>("MeetingId")
                        .HasColumnType("int");

                    b.Property<string>("NameEvent")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParticipantId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegistType")
                        .IsRequired()
                        .HasMaxLength(220)
                        .HasColumnType("nvarchar(220)");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("Registers");
                });

            modelBuilder.Entity("EventsVanguards.Shared.Entities.Sponsor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact_inf")
                        .IsRequired()
                        .HasMaxLength(950)
                        .HasColumnType("nvarchar(950)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Type_Sponsorship")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Sponsors");
                });

            modelBuilder.Entity("EventsVanguards.Shared.Entities.Meeting", b =>
                {
                    b.HasOne("EventsVanguards.Shared.Entities.Organizer", "Organizer")
                        .WithMany("Meetings")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("EventsVanguards.Shared.Entities.MeetingSponsor", b =>
                {
                    b.HasOne("EventsVanguards.Shared.Entities.Meeting", "Meeting")
                        .WithMany("MeetingSponsors")
                        .HasForeignKey("MeetingId");

                    b.HasOne("EventsVanguards.Shared.Entities.Sponsor", "Sponsor")
                        .WithMany("MeetingSponsors")
                        .HasForeignKey("SponsorId");

                    b.Navigation("Meeting");

                    b.Navigation("Sponsor");
                });

            modelBuilder.Entity("EventsVanguards.Shared.Entities.MeetingStaff", b =>
                {
                    b.HasOne("EventsVanguards.Shared.Entities.EventStaff", "EventStaff")
                        .WithMany("MeetingStaffs")
                        .HasForeignKey("EventStaffId");

                    b.HasOne("EventsVanguards.Shared.Entities.Meeting", "Meeting")
                        .WithMany("MeetingStaffs")
                        .HasForeignKey("MeetingId");

                    b.Navigation("EventStaff");

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("EventsVanguards.Shared.Entities.Register", b =>
                {
                    b.HasOne("EventsVanguards.Shared.Entities.Meeting", "Meeting")
                        .WithMany("Registers")
                        .HasForeignKey("MeetingId");

                    b.HasOne("EventsVanguards.Shared.Entities.Participant", "Participant")
                        .WithMany("Registers")
                        .HasForeignKey("ParticipantId");

                    b.Navigation("Meeting");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("EventsVanguards.Shared.Entities.EventStaff", b =>
                {
                    b.Navigation("MeetingStaffs");
                });

            modelBuilder.Entity("EventsVanguards.Shared.Entities.Meeting", b =>
                {
                    b.Navigation("MeetingSponsors");

                    b.Navigation("MeetingStaffs");

                    b.Navigation("Registers");
                });

            modelBuilder.Entity("EventsVanguards.Shared.Entities.Organizer", b =>
                {
                    b.Navigation("Meetings");
                });

            modelBuilder.Entity("EventsVanguards.Shared.Entities.Participant", b =>
                {
                    b.Navigation("Registers");
                });

            modelBuilder.Entity("EventsVanguards.Shared.Entities.Sponsor", b =>
                {
                    b.Navigation("MeetingSponsors");
                });
#pragma warning restore 612, 618
        }
    }
}
